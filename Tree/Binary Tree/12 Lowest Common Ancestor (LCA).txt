// Lowest Common Ancestor

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

// O(n^2)
bool getpath(Node* root, int n, vector<int> &path){
    if(root==NULL){
        return false;
    }
    
    path.push_back(root->data);
    if(root->data==n){
        return true;
    }
    
    if(getpath(root->left, n, path) || getpath(root->right, n, path)){
        return true;
    }
    
    path.pop_back();
    return false;
}

int LCA(Node* root, int n1, int n2){
    if(root==NULL){
        return -1;
    }
    
    vector<int> path1, path2;
    if(!getpath(root, n1, path1) || !getpath(root, n2, path2)){
        return -1;
    }
    
    int pc = 0;
    for(pc=0;pc<path1.size()&&path2.size();pc++){
        if(path1[pc]!=path2[pc]){
            break;
        }
    }
    
    return path1[pc-1];
}


// O(n)
Node* LCA2(Node* root, int n1, int n2){
    if(root==NULL){
        return NULL;
    }
    
    if(root->data == n1 || root->data==n2){
        return root;
    }
    
    Node* leftLCA = LCA2(root->left, n1, n2);
    Node* rightLCA = LCA2(root->right, n1, n2);
    
    if(leftLCA && rightLCA){
        return root;
    }
    
    if(leftLCA){
        return leftLCA;
    }
    return rightLCA;
}

int main(){
    Node* root = new Node(1);
    
    root->left = new Node(2);
    root->right = new Node(3);
    
    root->left->left = new Node(4);
    
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    
    root->right->left->left = new Node(7);
    
    int n1 = 6;
    int n2 = 7;
    // int lca = LCA(root, n1, n2);
    
    // if(lca==-1){
    //     cout << "LCA doesn't exist";
    // }
    // else{
    //     cout << lca;
    // }
    
    Node* lca = LCA2(root, n1, n2);
    
    if(lca==NULL){
        cout << "LCA doesn't exist";
    }
    else{
        cout << lca->data;
    }
    return 0;
}