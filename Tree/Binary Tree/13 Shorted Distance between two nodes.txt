// Shortest distance between two nodes in a binary tree

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

Node* LCA(Node* root, int n1, int n2){
    if(root==NULL){
        return NULL;
    }
    
    if(root->data==n1 || root->data==n2){
        return root;
    }
    
    Node* left = LCA(root->left, n1, n2);
    Node* right = LCA(root->right, n1, n2);
    
    if(left && right){
        return root;
    }
    
    if(left){
        return left;
    }
    return right;
}

int dist(Node* root, int k, int d){
    if(root==NULL){
        return -1;
    }
    
    if(root->data == k){
        return d;
    }
    
    int left = dist(root->left, k, d+1);
    if(left!=-1){
        return left;
    }
    return dist(root->right, k, d+1);
}


int shdist(Node* root, int n1, int n2){
    Node* lca = LCA(root, n1, n2);
    
    
    int d1 = dist(lca, n1, 0);
    int d2 = dist(lca, n2, 0);
    
    return d1+d2;
}

int main(){
    Node* root = new Node(1);
    
    root->left = new Node(2);
    root->right = new Node(3);
    
    root->left->left = new Node(4);
    root->right->right = new Node(5);
    
    int n1=4;
    int n2=5;
    cout << shdist(root, n1, n2);
    return 0;
}