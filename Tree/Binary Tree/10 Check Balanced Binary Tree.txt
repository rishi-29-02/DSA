// Check for the balanced binary tree 
// O(n^2)

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

int height(Node* root){
    if(root==NULL){
        return 0;
    }
    return max(height(root->left), height(root->right)) + 1;
}

bool isBalanced(Node* root){
    if(root==NULL){
        return true;
    }
    
    if(isBalanced(root->left)==false){
        return false;
    }
    if(isBalanced(root->right)==false){
        return false;
    }
    
    int lh = height(root->left);
    int rh = height(root->right);
    
    if(abs(lh-rh)<=1){
        return true;
    }
    else{
        return false;
    }
}

int main(){
    Node* root = new Node(1);
    
    root->left = new Node(2);
    //root->right = new Node(3);
    
    root->left->left = new Node(4);
    
    if(isBalanced(root)){
        cout << "Balanced";
    }
    else{
        cout << "UnBalanced";
    }
    
    return 0;
}


*************************************************************************************


// Check for the balanced binary tree 
// O(n)

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

bool isBalanced(Node* root, int *height){
    if(root==NULL){
        return true;
    }
    
    int lh=0, rh=0;
    if(isBalanced(root->left, &lh)==false){
        return false;
    }
    if(isBalanced(root->right, &rh)==false){
        return false;
    }
    
    *height = max(lh, rh) + 1;
    
    if(abs(lh-rh)<=1){
        return true;
    }
    return false;
}

int main(){
    Node* root = new Node(1);
    
    root->left = new Node(2);
    //root->right = new Node(3);
    
    root->left->left = new Node(4);
    
    int height = 0;
    
    if(isBalanced(root, &height)){
        cout << "Balanced";
    }
    else{
        cout << "UnBalanced";
    }
    
    return 0;
}