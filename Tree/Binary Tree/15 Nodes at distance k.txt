// print all the nodes at a distance k 

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
};

void make_parent(Node* root, unordered_map<Node*, Node*> &mp){
    if(root==NULL){
        return;
    }
    queue<Node*> q;
    q.push(root);
    
    while(!q.empty()){
        Node* node = q.front();
        q.pop();
        if(node->left){
            mp[node->left] = node;
            q.push(node->left);
        }
        if(node->right){
            mp[node->right] = node;
            q.push(node->right);
        }
    }
}

vector<int> NodesAtK(Node* root, Node* target, int k){
    unordered_map<Node*, Node*> mp;
    make_parent(root, mp);
    
    unordered_map<Node*, bool> visited;
    visited[target] = true;
    int level = 0;
    
    queue<Node*> q;
    q.push(target);
    
    while(!q.empty()){
        int n = q.size();
        if(level++==k){
            break;
        }
        for(int i=0;i<n;i++){
            Node* node = q.front();
            q.pop();
            
            if(node->left && !visited[node->left]){
                q.push(node->left);
                visited[node->left] = true;
            }
            
            if(node->right && !visited[node->right]){
                q.push(node->right);
                visited[node->right] = true;
            }
            
            if(mp[node] && !visited[mp[node]]){
                q.push(mp[node]);
                visited[mp[node]] = true;
            }
        }
    }
    
    vector<int> res;
    while(!q.empty()){
        Node* node = q.front();
        q.pop();
        res.push_back(node->data);
    }
    return res;
}

void preOrder(Node* root, int t, Node* &target){
    if(root==NULL){
        return;
    }
    
    if(root->data == t){
        target = root;
        return;
    }
    
    preOrder(root->left, t, target);
    preOrder(root->right, t, target);
}

int main(){
    Node* root = new Node(3);
    
    root->left = new Node(5);
    root->right = new Node(1);
    
    root->left->left = new Node(6);
    root->left->right = new Node(2);
    
    root->left->right->left = new Node(7);
    root->left->right->right = new Node(4);
    
    
    int t = 5;
    Node* target = NULL;
    preOrder(root, t, target);
    
    //cout << target->data;
    
    int k = 1;
    vector<int> ans = NodesAtK(root, target, k);
    for(auto it:ans){
        cout << it << " ";
    }
    return 0;
}