// Build a balanced BST from sorted array 

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
};

Node* sortedArrToBBST(int arr[], int st, int end){
    if(st > end){
        return NULL;
    }
    
    int mid = st + (end-st)/2;
    Node* root = new Node(arr[mid]);
    
    root->left = sortedArrToBBST(arr, st, mid-1);
    root->right = sortedArrToBBST(arr, mid+1, end);
    return root;
}

void printInOrder(Node* root){
    if(root==NULL){
        return;
    }
    
    printInOrder(root->left);
    cout << root->data << " ";
    printInOrder(root->right);
}

int main(){
    int arr[] = {1, 2, 3, 4, 5,6 ,7 ,8};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    Node* root = sortedArrToBBST(arr, 0, n-1);
    printInOrder(root);
    return 0;
}