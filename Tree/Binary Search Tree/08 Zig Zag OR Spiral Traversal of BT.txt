// Zig Zag Traversal or the Spiral Traversal of a Binary Tree

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
};

void spiral(Node* root){
    if(root==NULL){
        return;
    }
    
    stack<Node*> curr, next;
    curr.push(root);
    bool isleftToRight = false;
    
    while(!curr.empty()){
        Node* node = curr.top();
        curr.pop();
        
        if(node){
            cout << node->data << " ";
        }
        
        if(isleftToRight){
            if(node->left){
                next.push(node->left);
            }
            if(node->right){
                next.push(node->right);
            }
        }
        else{
            if(node->right){
                next.push(node->right);
            }
            if(node->left){
                next.push(node->left);
            }
        }
        
        if(curr.empty()){
            swap(curr, next);
            if(isleftToRight){
                isleftToRight = false;
            }
            else{
                isleftToRight = true;
            }
        }
    }
}

int main(){
    Node* root = new Node(1);
    
    root->left = new Node(2);
    root->right = new Node(3);
    
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    
    spiral(root);
    return 0;
}