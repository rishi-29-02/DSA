// Largest BST in a BInary Tree 

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
};

struct Info{
    int size;
    int max;
    int min;
    int ans;
    bool isBST;
};

Info LargestBST(Node* root){
    if(root==NULL){
        return {0, INT_MIN, INT_MAX, 0, true};
    }
    
    if(root->left==NULL && root->right==NULL){
        return {1, root->data, root->data, 1, true};
    }
    
    Info leftInfo = LargestBST(root->left);
    Info rightInfo = LargestBST(root->right);
    
    Info curr;
    curr.size = 1 + leftInfo.size + rightInfo.size;
    
    if(leftInfo.isBST && rightInfo.isBST && root->data > leftInfo.max &&
        root->data < rightInfo.min){
            curr.min = min(leftInfo.min, min(rightInfo.min, root->data));
            curr.max = max(leftInfo.max, max(rightInfo.max, root->data));
            
            curr.ans = curr.size;
            curr.isBST = true;
            
            return curr;
        }
        
    curr.ans = max(leftInfo.ans, rightInfo.ans);
    curr.isBST = false;
    return curr;
}

int main(){
    Node* root = new Node(15);
    
    root->left = new Node(20);
    root->right = new Node(30);
    
    root->left->left = new Node(2);
    
    cout << LargestBST(root).ans;
    return 0;
}