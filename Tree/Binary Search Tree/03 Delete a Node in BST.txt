// Delete a node in BST 

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

Node* inOrderSucc(Node* root){
    Node* curr = root;
    while(curr && curr->left){
        curr = curr->left;
    }
    return curr;
}

Node* deleteBST(Node* root, int key){
    if(root==NULL){
        return NULL;
    }
    
    if(key < root->data){
        root->left = deleteBST(root->left, key);
    }
    else if(key > root->data){
        root->right = deleteBST(root->right, key);
    }
    else{
        if(root->left==NULL){
            Node* tmp = root->right;
            free(root);
            return tmp;
        }
        else if(root->right==NULL){
            Node* tmp = root->left;
            free(root);
            return tmp;
        }
        else{
            Node* tmp = inOrderSucc(root->right);
            root->data = tmp->data;
            root->right = deleteBST(root->right, tmp->data);
        }
    }
    return root;
}
void inOrder(Node* root){
    if(root==NULL){
        return;
    }
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

int main(){
    Node* root = new Node(6);
    
    root->left = new Node(3);
    root->right = new Node(7);
    
    root->left->left = new Node(1);
    root->left->right = new Node(4);
    
    root->right->right = new Node(9);
    
    inOrder(root);
    
    int key = 9;
    deleteBST(root, key);
    
    cout << endl;
    inOrder(root);
    return 0;
}