// Check for Cycle in directed graph using DFS

#include <bits/stdc++.h>
using namespace std;

bool check_for_cycle(int node, vector<bool> &vis, vector<int> adj[], vector<bool> &dfs_vis){
    vis[node] = 1;
    dfs_vis[node] = 1;
    
    for(auto it:adj[node]){
        if(!vis[it]){
            if(check_for_cycle(it, vis, adj, dfs_vis)) return true;
        }
        else if(dfs_vis[it]){
            return true;
        }
    }
    dfs_vis[node] = 0;
    return false;
}

bool isCycle(int n, vector<int> adj[]){
    vector<bool> vis(n+1, 0);
    vector<bool> dfs_vis(n+1, 0);
    
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            if(check_for_cycle(i, vis, adj, dfs_vis)) return true;
        }
    }
    return false;
}

int main(){
    int n, m;
    cin >> n >> m;
    
    vector<int> adj[n+1];
    for(int i=0;i<m;i++){
        int u, v;
        cin >> u >> v;
        
        adj[u].push_back(v);
    }
    
    cout << isCycle(n, adj);
    return 0;
}